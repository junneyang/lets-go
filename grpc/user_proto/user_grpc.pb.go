// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUserDetail(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserDetail, error)
	ListUserDetails(ctx context.Context, in *UserGroup, opts ...grpc.CallOption) (UserService_ListUserDetailsClient, error)
	GetUserDetailGroup(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserDetailGroupClient, error)
	UserChat(ctx context.Context, opts ...grpc.CallOption) (UserService_UserChatClient, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUserDetail(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserDetail, error) {
	out := new(UserDetail)
	err := c.cc.Invoke(ctx, "/user_proto.UserService/GetUserDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUserDetails(ctx context.Context, in *UserGroup, opts ...grpc.CallOption) (UserService_ListUserDetailsClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], "/user_proto.UserService/ListUserDetails", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceListUserDetailsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_ListUserDetailsClient interface {
	Recv() (*UserDetail, error)
	grpc.ClientStream
}

type userServiceListUserDetailsClient struct {
	grpc.ClientStream
}

func (x *userServiceListUserDetailsClient) Recv() (*UserDetail, error) {
	m := new(UserDetail)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) GetUserDetailGroup(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserDetailGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[1], "/user_proto.UserService/GetUserDetailGroup", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetUserDetailGroupClient{stream}
	return x, nil
}

type UserService_GetUserDetailGroupClient interface {
	Send(*User) error
	CloseAndRecv() (*UserDetailGroup, error)
	grpc.ClientStream
}

type userServiceGetUserDetailGroupClient struct {
	grpc.ClientStream
}

func (x *userServiceGetUserDetailGroupClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceGetUserDetailGroupClient) CloseAndRecv() (*UserDetailGroup, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UserDetailGroup)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) UserChat(ctx context.Context, opts ...grpc.CallOption) (UserService_UserChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[2], "/user_proto.UserService/UserChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceUserChatClient{stream}
	return x, nil
}

type UserService_UserChatClient interface {
	Send(*User) error
	Recv() (*User, error)
	grpc.ClientStream
}

type userServiceUserChatClient struct {
	grpc.ClientStream
}

func (x *userServiceUserChatClient) Send(m *User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceUserChatClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetUserDetail(context.Context, *User) (*UserDetail, error)
	ListUserDetails(*UserGroup, UserService_ListUserDetailsServer) error
	GetUserDetailGroup(UserService_GetUserDetailGroupServer) error
	UserChat(UserService_UserChatServer) error
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetUserDetail(context.Context, *User) (*UserDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetail not implemented")
}
func (UnimplementedUserServiceServer) ListUserDetails(*UserGroup, UserService_ListUserDetailsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUserDetails not implemented")
}
func (UnimplementedUserServiceServer) GetUserDetailGroup(UserService_GetUserDetailGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserDetailGroup not implemented")
}
func (UnimplementedUserServiceServer) UserChat(UserService_UserChatServer) error {
	return status.Errorf(codes.Unimplemented, "method UserChat not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetUserDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_proto.UserService/GetUserDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserDetail(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUserDetails_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserGroup)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).ListUserDetails(m, &userServiceListUserDetailsServer{stream})
}

type UserService_ListUserDetailsServer interface {
	Send(*UserDetail) error
	grpc.ServerStream
}

type userServiceListUserDetailsServer struct {
	grpc.ServerStream
}

func (x *userServiceListUserDetailsServer) Send(m *UserDetail) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_GetUserDetailGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).GetUserDetailGroup(&userServiceGetUserDetailGroupServer{stream})
}

type UserService_GetUserDetailGroupServer interface {
	SendAndClose(*UserDetailGroup) error
	Recv() (*User, error)
	grpc.ServerStream
}

type userServiceGetUserDetailGroupServer struct {
	grpc.ServerStream
}

func (x *userServiceGetUserDetailGroupServer) SendAndClose(m *UserDetailGroup) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceGetUserDetailGroupServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_UserChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).UserChat(&userServiceUserChatServer{stream})
}

type UserService_UserChatServer interface {
	Send(*User) error
	Recv() (*User, error)
	grpc.ServerStream
}

type userServiceUserChatServer struct {
	grpc.ServerStream
}

func (x *userServiceUserChatServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceUserChatServer) Recv() (*User, error) {
	m := new(User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserDetail",
			Handler:    _UserService_GetUserDetail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListUserDetails",
			Handler:       _UserService_ListUserDetails_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserDetailGroup",
			Handler:       _UserService_GetUserDetailGroup_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UserChat",
			Handler:       _UserService_UserChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "user_proto/user.proto",
}
